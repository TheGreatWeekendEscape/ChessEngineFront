{
  "version": 3,
  "sources": ["../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/webpack/universalModuleDefinition", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/webpack/bootstrap", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/byte.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/client.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/compatibility/compat-client.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/compatibility/stomp.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/frame.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/index.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/parser.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/stomp-handler.ts", "../../../../../node_modules/@stomp/stompjs/bundles/webpack:/StompJs/src/versions.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"StompJs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StompJs\"] = factory();\n\telse\n\t\troot[\"StompJs\"] = factory();\n})(window, function() {\nreturn ", " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n", "/**\n * Some byte values, used as per STOMP specifications.\n *\n * @internal\n */\nexport const Byte = {\n  // LINEFEED byte (octet 10)\n  LF: '\\x0A',\n  // NULL byte (octet 0)\n  NULL: '\\x00'\n};\n", "import {StompHeaders} from \"./stomp-headers\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  messageCheckCallbackType,\n  publishParams\n} from \"./types\";\nimport {StompConfig} from './stomp-config';\nimport {StompHandler} from \"./stomp-handler\";\nimport {Versions} from \"./versions\";\n\n/**\n * STOMP Client Class.\n */\nexport class Client {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\n   */\n  public brokerURL: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        client.stompVersions = new Versions(['1.0', '1.1'])\n   * ```\n   */\n  public stompVersions = Versions.default;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        client.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        client.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   */\n  public webSocketFactory: () => WebSocket;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   */\n  public reconnectDelay: number = 5000;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatIncoming: number = 10000;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   */\n  public heartbeatOutgoing: number = 10000;\n\n  /**\n   * Underlying WebSocket instance, READONLY.\n   */\n  get webSocket(): WebSocket {\n    return this._webSocket;\n  }\n  /**\n   * Underlying WebSocket instance\n   * @internal\n   */\n  protected _webSocket: WebSocket;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   */\n  public connectHeaders: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   */\n  public disconnectHeaders: StompHeaders;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\n   * from an endpoint.\n   *\n   * The actual {@link Message} will be passed as parameter to the callback.\n   */\n  public onUnhandledMessage: messageCallbackType;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onUnhandledReceipt: frameCallbackType;\n\n  /**\n   * Will be invoked if {@link Frame} of unknown type is received from the STOMP broker.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onUnhandledFrame: frameCallbackType;\n\n  /**\n   * `true` if there is a active connection with STOMP Broker\n   */\n  get connected(): boolean {\n    return (!!this._stompHandler) && this._stompHandler.connected;\n  }\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change options on the client, which will impact the immediate connect.\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\n   */\n  public beforeConnect: () => void;\n\n  /**\n   * Callback, invoked on every successful connection to the STOMP broker.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   * Sometimes clients will like to use headers from this frame.\n   */\n  public onConnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\n   * the STOMP broker disconnected due to an error.\n   *\n   * The actual Receipt {@link Frame} acknowledging the DISCONNECT will be passed as parameter to the callback.\n   *\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\n   * receiving the Receipt {@link Frame} acknowledging the DISCONNECT.\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\n   * STOMP broker disconnects.\n   */\n  public onDisconnect: frameCallbackType;\n\n  /**\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   */\n  public onStompError: frameCallbackType;\n\n  /**\n   * Callback, invoked when underlying WebSocket is closed.\n   *\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   * is passed as parameter to the callback.\n   */\n  public onWebSocketClose: closeEventCallbackType;\n\n  /**\n   * By default, debug messages are discarded. To log to `console` following can be used:\n   *\n   * ```javascript\n   *        client.debug = function(str) {\n   *          console.log(str);\n   *        };\n   * ```\n   *\n   * Currently this method does not support levels of log. Be aware that the output can be quite verbose\n   * and may contain sensitive information (like passwords, tokens etc.).\n   */\n  public debug: debugFnType;\n\n  /**\n   * version of STOMP protocol negotiated with the server, READONLY\n   */\n  get connectedVersion(): string {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n\n  private _stompHandler: StompHandler;\n\n  /**\n   * if the client is active (connected or going to reconnect)\n   */\n  get active(): boolean {\n    return this._active;\n  }\n  private _active: boolean = false;\n  private _reconnector: any;\n\n  /**\n   * Create an instance.\n   */\n  constructor(conf: StompConfig = {}) {\n    // Dummy callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this.disconnectHeaders = {};\n\n    // Apply configuration\n    this.configure(conf);\n  }\n\n  /**\n   * Update configuration.\n   */\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n   */\n  public activate(): void {\n    this._active = true;\n\n    this._connect();\n  }\n\n  private _connect(): void {\n    if (this.connected) {\n      this.debug('STOMP: already connected, nothing to do');\n      return;\n    }\n\n    this.beforeConnect();\n\n    if (!this._active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n\n    this.debug(\"Opening Web Socket...\");\n\n    // Get the actual WebSocket (or a similar object)\n    this._webSocket = this._createWebSocket();\n\n    this._stompHandler = new StompHandler(this, this._webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this.disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      onConnect: (frame) => {\n        if (!this._active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: (frame) => {\n        this.onDisconnect(frame);\n      },\n      onStompError: (frame) => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: (evt) => {\n        this.onWebSocketClose(evt);\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        if (this._active) {\n          this._schedule_reconnect();\n        }\n      },\n      onUnhandledMessage: (message) => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: (frame) => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: (frame) => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n\n    this._stompHandler.start();\n  }\n\n  private _createWebSocket() {\n    let webSocket: WebSocket;\n\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    }\n    webSocket.binaryType = \"arraybuffer\";\n    return webSocket;\n  }\n\n  private _schedule_reconnect(): void {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate the {@link Client} you can call [Client#activate]{@link Client#activate}.\n   */\n  public deactivate(): void {\n    // indicate that auto reconnect loop should terminate\n    this._active = false;\n\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n    }\n    this._disposeStompHandler();\n  }\n\n  /**\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n   * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n   * After forcing disconnect, automatic reconnect will be attempted.\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n   */\n  public forceDisconnect() {\n    if (this._webSocket) {\n      if (this._webSocket.readyState === WebSocket.CONNECTING || this._webSocket.readyState === WebSocket.OPEN) {\n        this._webSocket.close();\n      }\n    }\n  }\n\n  private _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n      this._stompHandler = null;\n    }\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * Body must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * ```javascript\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(params: publishParams) {\n    this._stompHandler.publish(params);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame} will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Subscribing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n   *\n   *\n   *        // Publishing with acknowledgement\n   *        receiptId = randomText();\n   *\n   *        client.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   */\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n\n  /**\n   * Subscribe to a STOMP Broker location. The callbck will be invoked for each received message with\n   * the {@link Message} as argument.\n   *\n   * Note: The library will generate an unique ID if there is none provided in the headers.\n   *       To use your own ID, pass it using the headers argument.\n   *\n   * ```javascript\n   *        callback = function(message) {\n   *        // called when the client receives a STOMP message from the server\n   *          if (message.body) {\n   *            alert(\"got message with body \" + message.body)\n   *          } else {\n   *            alert(\"got empty message\");\n   *          }\n   *        });\n   *\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\n   *\n   *        // Explicit subscription id\n   *        var mySubId = 'my-subscription-id-001';\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n   * ```\n   */\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n\n  /**\n   * It is preferable to unsubscribe from a subscription by calling\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n   *\n   * ```javascript\n   *        var subscription = client.subscribe(destination, onmessage);\n   *        // ...\n   *        subscription.unsubscribe();\n   * ```\n   *\n   * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n   */\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    this._stompHandler.unsubscribe(id, headers);\n  }\n\n  /**\n   * Start a transaction, the returned {@link Transaction} has methods - [commit]{@link Transaction#commit}\n   * and [abort]{@link Transaction#abort}.\n   *\n   * `transactionId` is optional, if not passed the library will generate it internally.\n   */\n  public begin(transactionId?: string): Transaction {\n    return this._stompHandler.begin(transactionId);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * It is preferable to commit a transaction by calling [commit]{@link Transaction#commit} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.commit();\n   * ```\n   */\n  public commit(transactionId: string): void {\n    this._stompHandler.commit(transactionId);\n  }\n\n  /**\n   * Abort a transaction.\n   * It is preferable to abort a transaction by calling [abort]{@link Transaction#abort} directly on\n   * {@link Transaction} returned by [client.begin]{@link Client#begin}.\n   *\n   * ```javascript\n   *        var tx = client.begin(txId);\n   *        //...\n   *        tx.abort();\n   * ```\n   */\n  public abort(transactionId: string): void {\n    this._stompHandler.abort(transactionId);\n  }\n\n  /**\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link Message#ack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // acknowledge it\n   *          message.ack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n\n  /**\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link Message#nack} directly\n   * on the {@link Message} handled by a subscription callback:\n   *\n   * ```javascript\n   *        var callback = function (message) {\n   *          // process the message\n   *          // an error occurs, nack it\n   *          message.nack();\n   *        };\n   *        client.subscribe(destination, callback, {'ack': 'client'});\n   * ```\n   */\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}", "import {Client} from \"../client\";\nimport {StompHeaders} from \"../stomp-headers\";\nimport {frameCallbackType, messageCallbackType} from \"../types\";\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n\n  /**\n   * It is no op now. No longer needed. Large packets work out of the box.\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback, connectCallback, errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw(\"Connect requires at least 2 arguments\");\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback, headers['host']] = args;\n          break;\n        default:\n          [headers['login'], headers['passcode'], connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public send(destination: string, headers: {[key:string]: any} = {}, body: string = ''): void {\n    headers = (<any>Object).assign({}, headers);\n\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination: destination,\n      headers: <StompHeaders>headers,\n      body: body,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n   *\n   * **Deprecated**\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}\n\n/**\n * @internal\n */\nclass HeartbeatInfo {\n  constructor (private client: CompatClient) {\n  }\n\n  get outgoing(): number {\n    return this.client.heartbeatOutgoing;\n  }\n\n  set outgoing(value: number) {\n    this.client.heartbeatOutgoing = value;\n  }\n\n  get incoming(): number {\n    return this.client.heartbeatIncoming;\n  }\n\n  set incoming(value: number) {\n    this.client.heartbeatIncoming = value;\n  }\n}", "import {Versions} from \"../versions\";\nimport {CompatClient} from \"./compat-client\";\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  public static WebSocketClass:any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client (url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const ws_fn= function() {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(ws_fn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once. While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over (ws: any): CompatClient {\n    const ws_fn = typeof(ws) === \"function\" ? ws : () => ws;\n\n    return new CompatClient(ws_fn);\n  }\n}\n", "import {StompHeaders} from \"./stomp-headers\";\nimport {Byte} from \"./byte\";\nimport {RawFrameType} from \"./types\";\n\n/**\n * @internal\n */\ntype unmarshallResults = { frames: Frame[]; partial: string };\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    let {command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = (<any>Object).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: RawFrameType, escapeHeaderValues: boolean): Frame {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (let header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = Frame.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new Frame({\n      command: rawFrame.command,\n      headers: headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues: escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if(this.isBinaryBody) {\n      return Frame.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + Byte.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (let name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(Byte.LF) + Byte.LF + Byte.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, binaryBody: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\r/g, \"\\\\r\").replace(/\\n/g, \"\\\\n\").replace(/:/g, \"\\\\c\");\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, \"\\r\").replace(/\\\\n/g, \"\\n\").replace(/\\\\c/g, \":\").replace(/\\\\\\\\/g, \"\\\\\");\n  }\n}\n", "export * from './client';\nexport * from './frame';\nexport * from './message';\nexport * from './parser';\nexport * from './stomp-config';\nexport * from './stomp-headers';\nexport * from './stomp-subscription';\nexport * from './transaction';\nexport * from './types';\nexport * from './versions';\n\n// Compatibility code\nexport * from './compatibility/compat-client';\nexport * from './compatibility/stomp';\n", "import {RawFrameType} from './types';\n\n/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * @internal\n */\nexport class Parser {\n  private readonly _encoder = new TextEncoder();\n  private readonly _decoder = new TextDecoder();\n\n  private _results: RawFrameType;\n\n  private _token: number[] = [];\n  private _headerKey: string;\n  private _bodyBytesRemaining:number;\n\n  private _onByte: (byte: number) => void;\n\n  public constructor(public onFrame: (rawFrame: RawFrameType) => void, public onIncomingPing: () => void) {\n    this._initState();\n  }\n\n  public parseChunk(segment: string|ArrayBuffer) {\n    let chunk: Uint8Array;\n\n    if ((segment instanceof ArrayBuffer)) {\n      chunk = new Uint8Array(segment);\n    } else {\n      chunk = this._encoder.encode(segment);\n    }\n\n    for (let i = 0; i < chunk.length; i++) {\n      const byte = chunk[i];\n      this._onByte(byte);\n    }\n  }\n\n  // The following implements a simple Rec Descent Parser.\n  // The grammar is simple and just one byte tells what should be the next state\n\n  private _collectFrame(byte: number): void {\n    if (byte === NULL) { // Ignore\n      return;\n    }\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) { // Incoming Ping\n      this.onIncomingPing();\n      return;\n    }\n\n    this._onByte = this._collectCommand;\n    this._reinjectByte(byte);\n  }\n\n  private _collectCommand(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.command = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaders;\n      return;\n    }\n\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaders(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._setupCollectBody();\n      return;\n    }\n    this._onByte = this._collectHeaderKey;\n    this._reinjectByte(byte);\n  }\n\n  private _reinjectByte(byte: number) {\n    this._onByte(byte);\n  }\n\n  private _collectHeaderKey(byte: number): void {\n    if (byte === COLON) {\n      this._headerKey = this._consumeTokenAsUTF8();\n      this._onByte = this._collectHeaderValue;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectHeaderValue(byte: number): void {\n    if (byte === CR) { // Ignore CR\n      return;\n    }\n    if (byte === LF) {\n      this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n      this._headerKey = undefined;\n      this._onByte = this._collectHeaders;\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _setupCollectBody() {\n    const contentLengthHeader = this._results.headers.filter(function (header: [string, string]) {\n      return header[0] === \"content-length\";\n    })[0];\n\n    if(contentLengthHeader) {\n      this._bodyBytesRemaining = parseInt(contentLengthHeader[1]);\n      this._onByte = this._collectBodyFixedSize;\n    } else {\n      this._onByte = this._collectBodyNullTerminated;\n    }\n  }\n\n  private _collectBodyNullTerminated(byte: number): void {\n    if (byte === NULL) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _collectBodyFixedSize(byte: number): void {\n    // It is post decrement, so that we discard the trailing NULL octet\n    if (this._bodyBytesRemaining-- === 0) {\n      this._retrievedBody();\n      return;\n    }\n    this._consumeByte(byte);\n  }\n\n  private _retrievedBody() {\n    this._results.binaryBody = this._consumeTokenAsRaw();\n\n    this.onFrame(this._results);\n\n    this._initState();\n  }\n\n  // Rec Descent Parser helpers\n\n  private _consumeByte(byte: number) {\n    this._token.push(byte);\n  }\n\n  private _consumeTokenAsUTF8() {\n    return this._decoder.decode(this._consumeTokenAsRaw());\n  }\n\n  private _consumeTokenAsRaw() {\n    const rawResult = new Uint8Array(this._token);\n    this._token = [];\n    return rawResult;\n  }\n\n  private _initState() {\n    this._results = {\n      command: undefined,\n      headers: [],\n      binaryBody: undefined,\n    };\n\n    this._token = [];\n    this._headerKey = undefined;\n\n    this._onByte = this._collectFrame;\n  }\n\n}", "import {Client} from './client';\nimport {Byte} from \"./byte\";\nimport {Versions} from \"./versions\";\nimport {Message} from \"./message\";\nimport {Frame} from \"./frame\";\nimport {StompHeaders} from \"./stomp-headers\";\nimport {closeEventCallbackType, debugFnType, frameCallbackType, messageCallbackType, publishParams} from \"./types\";\nimport {StompSubscription} from \"./stomp-subscription\";\nimport {Transaction} from \"./transaction\";\nimport {StompConfig} from \"./stomp-config\";\nimport {Parser} from \"./parser\";\n\n/**\n * The STOMP protocol handler\n *\n * @internal\n */\nexport class StompHandler {\n  public debug: debugFnType;\n\n  public stompVersions: Versions;\n\n  public connectHeaders: StompHeaders;\n\n  public disconnectHeaders: StompHeaders;\n\n  public heartbeatIncoming: number;\n\n  public heartbeatOutgoing: number;\n\n  public onUnhandledMessage: messageCallbackType;\n\n  public onUnhandledReceipt: frameCallbackType;\n\n  public onUnhandledFrame: frameCallbackType;\n\n  public onConnect: frameCallbackType;\n\n  public onDisconnect: frameCallbackType;\n\n  public onStompError: frameCallbackType;\n\n  public onWebSocketClose: closeEventCallbackType;\n\n  get connectedVersion(): string {\n    return this._connectedVersion;\n  }\n  private _connectedVersion: string;\n\n  get connected(): boolean {\n    return this._connected;\n  }\n\n  private _connected: boolean;\n\n  private readonly _subscriptions: { [key: string]: messageCallbackType };\n  private readonly _receiptWatchers: { [key: string]: frameCallbackType };\n  private _partialData: string;\n  private _escapeHeaderValues: boolean;\n  private _counter: number;\n  private _pinger: any;\n  private _ponger: any;\n  private _lastServerActivityTS: number;\n\n  constructor(private _client: Client, private _webSocket: WebSocket, config: StompConfig = {}) {\n    // used to index subscribers\n    this._counter = 0;\n\n    // subscription callbacks indexed by subscriber's ID\n    this._subscriptions = {};\n\n    // receipt-watchers indexed by receipts-ids\n    this._receiptWatchers = {};\n\n    this._partialData = '';\n\n    this._escapeHeaderValues = false;\n\n    this._lastServerActivityTS = Date.now();\n\n    this.configure(config);\n  }\n\n  public configure(conf: StompConfig): void {\n    // bulk assign all properties to this\n    (<any>Object).assign(this, conf);\n  }\n\n  public start(): void {\n    const parser = new Parser(\n      // On Frame\n      (rawFrame) => {\n        const frame = Frame.fromRawFrame(rawFrame, this._escapeHeaderValues);\n\n        this.debug(`<<< ${frame}`);\n\n        const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n        serverFrameHandler(frame);\n      },\n      // On Incoming Ping\n      () => {\n        this.debug(\"<<< PONG\");\n      }\n    );\n\n    this._webSocket.onmessage = (evt: any) => {\n      this.debug('Received data');\n      this._lastServerActivityTS = Date.now();\n\n      parser.parseChunk(evt.data);\n    };\n\n    this._webSocket.onclose = (closeEvent: any): void => {\n      this.debug(`Connection closed to ${this._webSocket.url}`);\n      this.onWebSocketClose(closeEvent);\n      this._cleanUp();\n    };\n\n    this._webSocket.onopen = () => {\n      this.debug('Web Socket Opened...');\n      this.connectHeaders[\"accept-version\"] = this.stompVersions.supportedVersions();\n      this.connectHeaders[\"heart-beat\"] = [this.heartbeatOutgoing, this.heartbeatIncoming].join(',');\n      this._transmit({command: \"CONNECT\", headers: this.connectHeaders});\n    };\n  }\n\n  private readonly _serverFrameHandlers: { [key: string]: frameCallbackType } = {\n\n    // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n    'CONNECTED': (frame) => {\n      this.debug(`connected to server ${frame.headers.server}`);\n      this._connected = true;\n      this._connectedVersion = frame.headers.version;\n      // STOMP version 1.2 needs header values to be escaped\n      if (this._connectedVersion === Versions.V1_2) {\n        this._escapeHeaderValues = true;\n      }\n\n      this._setupHeartbeat(frame.headers);\n      this.onConnect(frame);\n    },\n\n    // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n    \"MESSAGE\": (frame) => {\n      // the callback is registered when the client calls\n      // `subscribe()`.\n      // If there is no registered subscription for the received message,\n      // the default `onUnhandledMessage` callback is used that the client can set.\n      // This is useful for subscriptions that are automatically created\n      // on the browser side (e.g. [RabbitMQ's temporary\n      // queues](http://www.rabbitmq.com/stomp.html)).\n      const subscription = frame.headers.subscription;\n      const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n\n      // bless the frame to be a Message\n      const message = <Message>frame;\n\n      const client = this;\n      const messageId = this._connectedVersion === Versions.V1_2 ? message.headers[\"ack\"] : message.headers[\"message-id\"];\n\n      // add `ack()` and `nack()` methods directly to the returned frame\n      // so that a simple call to `message.ack()` can acknowledge the message.\n      message.ack = (headers: StompHeaders = {}): void => {\n        return client.ack(messageId, subscription, headers);\n      };\n      message.nack = (headers: StompHeaders = {}): void => {\n        return client.nack(messageId, subscription, headers);\n      };\n      onReceive(message);\n    },\n\n    // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n    \"RECEIPT\": (frame) => {\n      const callback = this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      if (callback) {\n        callback(frame);\n        // Server will acknowledge only once, remove the callback\n        delete this._receiptWatchers[frame.headers[\"receipt-id\"]];\n      } else {\n        this.onUnhandledReceipt(frame);\n      }\n    },\n\n    // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n    'ERROR': (frame) => {\n      this.onStompError(frame);\n    }\n  };\n\n  private _setupHeartbeat(headers: StompHeaders): void {\n    if ((headers.version !== Versions.V1_1 && headers.version !== Versions.V1_2)) {\n      return;\n    }\n\n    // heart-beat header received from the server looks like:\n    //\n    //     heart-beat: sx, sy\n    const [serverOutgoing, serverIncoming] = (headers['heart-beat']).split(\",\").map((v: string) => parseInt(v));\n\n    if ((this.heartbeatOutgoing !== 0) && (serverIncoming !== 0)) {\n      let ttl: number = Math.max(this.heartbeatOutgoing, serverIncoming);\n      this.debug(`send PING every ${ttl}ms`);\n      this._pinger = setInterval(() => {\n        this._webSocket.send(Byte.LF);\n        this.debug(\">>> PING\");\n      }, ttl);\n    }\n\n    if ((this.heartbeatIncoming !== 0) && (serverOutgoing !== 0)) {\n      let ttl: number = Math.max(this.heartbeatIncoming, serverOutgoing);\n      this.debug(`check PONG every ${ttl}ms`);\n      this._ponger = setInterval(() => {\n        const delta = Date.now() - this._lastServerActivityTS;\n        // We wait twice the TTL to be flexible on window's setInterval calls\n        if (delta > (ttl * 2)) {\n          this.debug(`did not receive server activity for the last ${delta}ms`);\n          this._webSocket.close();\n        }\n      }, ttl);\n    }\n  }\n\n  private _transmit(params: { command: string, headers?: StompHeaders,\n                              body?: string, binaryBody?: Uint8Array, skipContentLengthHeader?: boolean }): void {\n    let {command, headers, body, binaryBody, skipContentLengthHeader} = params;\n    let frame = new Frame({\n      command: command,\n      headers: headers,\n      body: body,\n      binaryBody: binaryBody,\n      escapeHeaderValues: this._escapeHeaderValues,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n    this.debug(`>>> ${frame}`);\n    this._webSocket.send(frame.serialize());\n/* Do we need this?\n    // if necessary, split the *STOMP* frame to send it on many smaller\n    // *WebSocket* frames\n    while (true) {\n      if (out.length > this.maxWebSocketFrameSize) {\n        this._webSocket.send(out.substring(0, this.maxWebSocketFrameSize));\n        out = out.substring(this.maxWebSocketFrameSize);\n        this.debug(`remaining = ${out.length}`);\n      } else {\n        this._webSocket.send(out);\n        return;\n      }\n    }\n*/\n  }\n\n  public dispose(): void {\n    if (this.connected) {\n      try {\n        if (!this.disconnectHeaders['receipt']) {\n          this.disconnectHeaders['receipt'] = `close-${this._counter++}`;\n        }\n        this.watchForReceipt(this.disconnectHeaders['receipt'], (frame) => {\n          this._webSocket.close();\n          this._cleanUp();\n          this.onDisconnect(frame);\n        });\n        this._transmit({command: \"DISCONNECT\", headers: this.disconnectHeaders});\n      } catch (error) {\n        this.debug(`Ignoring error during disconnect ${error}`);\n      }\n    } else {\n      if (this._webSocket.readyState === WebSocket.CONNECTING || this._webSocket.readyState === WebSocket.OPEN) {\n        this._webSocket.close();\n      }\n    }\n  }\n\n  private _cleanUp() {\n    this._connected = false;\n\n    if (this._pinger) {\n      clearInterval(this._pinger);\n    }\n    if (this._ponger) {\n      clearInterval(this._ponger);\n    }\n  }\n\n  public publish(params: publishParams): void {\n    let {destination, headers, body, binaryBody, skipContentLengthHeader} = params;\n    headers = (<any>Object).assign({destination: destination}, headers);\n    this._transmit({\n      command: \"SEND\",\n      headers: headers,\n      body: body,\n      binaryBody: binaryBody,\n      skipContentLengthHeader: skipContentLengthHeader\n    });\n  }\n\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\n    this._receiptWatchers[receiptId] = callback;\n  }\n\n  public subscribe(destination: string, callback: messageCallbackType, headers: StompHeaders = {}): StompSubscription {\n    headers = (<any>Object).assign({}, headers);\n\n    if (!headers.id) {\n      headers.id = `sub-${this._counter++}`;\n    }\n    headers.destination = destination;\n    this._subscriptions[headers.id] = callback;\n    this._transmit({command: \"SUBSCRIBE\", headers: headers});\n    const client = this;\n    return {\n      id: headers.id,\n\n      unsubscribe(hdrs) {\n        return client.unsubscribe(headers.id, hdrs);\n      }\n    };\n  }\n\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\n    headers = (<any>Object).assign({}, headers);\n\n    delete this._subscriptions[id];\n    headers.id = id;\n    this._transmit({command: \"UNSUBSCRIBE\", headers: headers});\n  }\n\n  public begin(transactionId: string): Transaction {\n    const txId = transactionId || (`tx-${this._counter++}`);\n    this._transmit({\n      command: \"BEGIN\", headers: {\n        transaction: txId\n      }\n    });\n    const client = this;\n    return {\n      id: txId,\n      commit(): void {\n        client.commit(txId);\n      },\n      abort(): void {\n        client.abort(txId);\n      }\n    };\n  }\n\n  public commit(transactionId: string): void {\n    this._transmit({\n      command: \"COMMIT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public abort(transactionId: string): void {\n    this._transmit({\n      command: \"ABORT\", headers: {\n        transaction: transactionId\n      }\n    });\n  }\n\n  public ack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (<any>Object).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    this._transmit({command: \"ACK\", headers: headers});\n  }\n\n  public nack(messageId: string, subscriptionId: string, headers: StompHeaders = {}): void {\n    headers = (<any>Object).assign({}, headers);\n\n    if (this._connectedVersion === Versions.V1_2) {\n      headers[\"id\"] = messageId;\n    } else {\n      headers[\"message-id\"] = messageId;\n    }\n    headers.subscription = subscriptionId;\n    return this._transmit({command: \"NACK\", headers: headers});\n  }\n\n}\n", "/**\n * Supported STOMP versions\n */\nexport class Versions {\n  /**\n   * 1.0\n   */\n  static V1_0= '1.0';\n  /**\n   * 1.1\n   */\n  static V1_1= '1.1';\n  /**\n   * 1.2\n   */\n  static V1_2= '1.2';\n\n  /**\n   * @internal\n   */\n  static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor (public versions: string[]) {\n  }\n\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  public protocolVersions() {\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["module", "exports", "key", "Client", "CompatClient", "HeartbeatInfo", "Stomp", "Frame", "Parser", "StompHandler", "Versions"]
}
